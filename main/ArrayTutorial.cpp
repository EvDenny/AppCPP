#include <iostream>
#include <string>
#include <cmath>
#include <ctime>
#include <cstdlib>
#include <cstdio>
#include <thread>
#include <chrono>
#include "ArrayTutorial.h"
#include "Sleep.h"
#include "clear.h"

void ArrayTutorial() {
    std::cout << "Evan Denny's Array Tutorial" << std::endl;
    std::cout << " ========================= " << std::endl;
    int myarray[10];
    std::string input;
    Sleep::milliseconds(200);
    std::cout << "int myarray[10];" << std::endl;
    Sleep::milliseconds(1000);
    type1:
    std::cout << "Type out this code 'sizeof(myarray)': ";
    getline(std::cin, input);
    if (input == "sizeof(myarray)") {
        std::cout << std::endl;
        Sleep::seconds(1);
    } else {
        std::cout << "Wrong input!" << std::endl;
        Sleep::seconds(1);
        cls();
        goto type1;
    }
    std::cout << "The output for sizeof(myarray): " << sizeof(myarray) << " bytes" <<std::endl;
    Sleep::milliseconds(2200);
    type2:
    std::cout << "An integer (int) is 4 bytes (32 bits) in size. ";
    Sleep::milliseconds(1000);
    std::cout << "So the size of myarray is really 40/? elements. Enter '?': ";
    getline(std::cin, input);
    if (input == "4") {
        std::cout << "Correct!" << std::endl;
        Sleep::milliseconds(1000);
    } else {
        std::cout << "Wrong input!" << std::endl;
        Sleep::milliseconds(1000);
        cls();
        goto type2;
    }
    std::cout << "                  v (40 bytes)      v (4 bytes per integer)" << std::endl;
    std::cout << "The output for [sizeof(myarray) / sizeof(int)]: " << (sizeof(myarray) / sizeof(int)) << " elements in myarray!" <<std::endl;
    Sleep::seconds(4);
    std::cout << "The number of elements is 10, but because each element is of size int(4 bytes), the size of myarray is 40 bytes." << std::endl;
    Sleep::seconds(5);
    std::cout << std::endl << "Let's try to access the elements of myarray." << std::endl;
    Sleep::milliseconds(3800);
    std::cout << "Press 'ENTER' to continue..." << std::endl;
    getchar();
    cls();
    std::cout << "int myarray[10];" << std::endl;
    std::cout << "Press 'ENTER' to output each element of myarray..." << std::endl;
    getchar();
    Sleep::seconds(1);
    std::cout << "Output: ";
    for (int i = 0; i < 10; i++) {
        std::cout << "Element " << i << ": '" << myarray[i] << "' | ";
    }
    std::cout << std::endl << std::endl;
    Sleep::seconds(3);
    std::cout << "That's weird. The elements of myarray aren't initialized.\n";
    Sleep::seconds(3);
    std::cout << "If you don't initialize them, they will be either 0 or a random value\nthat was generated by the computer's RAM.\n";
    Sleep::seconds(4);
    std::cout << "Let's initialize them." << std::endl;
    Sleep::milliseconds(3800);
    std::cout << "CONTINUE";
    getchar();
    system("clear");
    std::cout << "Let's create a new array called myarray2." << std::endl;
    Sleep::seconds(2);
    std::cout << "Unless we initialize an array from the start, we would\nhave to access the elements of the array individually." << std::endl;
    Sleep::seconds(2);
    std::cout << "I don't want to talk about flow control right now, hence why I'm not reusing myarray." << std::endl;
    Sleep::seconds(1);
    std::cout << "Press 'ENTER' to continue..." << std::endl;
    getchar();
    int myarray2[] = { 10, 15, 20, 2, 4, 6, 18, 36, 48, 60 };
    std::cout << "int myarray2[] = { 10, 15, 20, 2, 4, 6, 18, 36, 48, 60 };\n" << std::endl;
    Sleep::seconds(1);
    std::cout << "Press 'ENTER' to output each element of myarray...\n";
    getchar();
    std::cout << "Elements:";
    for (int i = 0; i < 10; i++) {
        std::cout << " " << myarray2[i] << " ";
    }
    std::cout << std::endl;
    Sleep::seconds(3);
    std::cout << "Notice that we don't have to enter the 10 in the [] brackets.\n";
    Sleep::seconds(2);
    std::cout << "And there are sizeof(myarray2)/4 (or " << sizeof(myarray2)/4 << ") elements in myarray." << std::endl;
    Sleep::seconds(4);
    std::cout << "Continue..." << std::endl;
    getchar();
    system("clear");
    std::cout << "Thank you for participating in this tutorial!" << std::endl;
    Sleep::seconds(2);
    std::cout << "Press 'ENTER' to exit...";
    getchar();
}