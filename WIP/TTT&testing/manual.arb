require 'bundler/setup'
require 'tsort'
	
def sayGoodnight(name)
	puts "Goodnight, #{name}"
end

sayGoodnight("Evan")

a = [ 1, 'cat', 3.14159 ]
a[2] = nil



class Hash
	include TSort
	alias tsort_each_node each_key
	def tsort_each_child(node, &block)
		fetch(node).each(&block)
	end
end
 
class Make
	def initialize
		@dep = {}
		@dep.default = []
	end

	def rule(outputs, inputs=[], &block)
		triple = [outputs, inputs, block]
		outputs.each {|f| @dep[f] = [triple]}
		@dep[triple] = inputs
	end
	
	def build(target)
		each_strongly_connected_component_from(target) {|ns|
			if ns.length != 1
				fs = ns.delete_if {|n| Array === n}
				raise TSort::Cyclic.new("cyclic dependencies: #{fs.join ', '}")
			end
			n = ns.first
			if Array === n
				outputs, inputs, block = n
				inputs_time = inputs.map {|f| File.mtime f }.max
				begin
					outputs_time = outputs.map {|f| File.mtime f}.min
				rescue Errno::ENOENT
					outputs_time = nil
				end
				if outputs_time == nil ||
					inputs_time != nil && outputs_time <= inputs_time
				  sleep 1 if inputs_time != nil &&  inputs_time.to_i == Time.now.to_i
				  block.call
				end
			end
		}
	end

	def tsort_each_child(node, &block)
		@dep[node].each(&block)
	end
	include TSort
end

def command(arg)
	print arg, "\n"
	system arg
end

m = Make.new
m.rule(%w[t1]) {command 'date > t1'}
m.rule(%w[t2]) {command 'date > t2'}
m.rule(%w[t3]) {command 'date > t3'}
m.rule(%w[t4], %w[t1 t3]) {command 'cat t1 t3 > t4'}
m.rule(%w[t5], %w[t4 t2]) {command 'cat t4 t2 > t5'}
m.build('t5')